function [npathGUI,TestName] = TrainDyToGUI

global Tamb 

% Program that reads the input of TrainDy certified version (Jan 2009) and converts
% them into GUI inputs.

% Reading the informations about the input
[fsl,ntrack,nzug,petr,prTD,shw,vel_0] = inp_TDET;
[corsabg,corsadg,dampbg,dampdg,indexes,lwag,Mvt,nveicoli,ploco,posinput,pwago,stiffbg,stiffdg,...
    traccia,train] = translate_inputGUI(fsl,ntrack,nzug,petr);

% Back-compatibility
namedirfile = [prTD fsl];

% % Struct variable for the locos
% loco = car_loco(namedirfile,train);

% Reading of the pneumatic input
% [CA,CVactv,D1,DBVdata,Dcoll,dLC,Dpy,dTF,dx,epsilon,fsl,gmis,gmisCF,iDCVa,kcoll,Lcoll,...
%     Lvago,nomefilese,nomepath,P1,pCF,posDBV,SA,SR,t0,t95p,Tsim,tvis,typeDBV,Vbc,VhcM,...
%     VhcMa,vManovra] = inp_data2(namedirfile,dynamic,nveicoli);
[CA,CVactv,D1,DBVdata,Dcoll,dLC,Dpy,dTF,dx,epsilon,EPV,EPV_active,gmis,gmisCF,iDCVa,kcoll,Lcoll,...
    Lvago,nomefilese,nomepath,nveicoli,P1,pCF,posDBV,RgBk,SA,SR,t0,t95p,tandem,Tsim,tvis,typeDBV,Vbc,VhcM,...
    VhcMa,vManovra,vmaster,VV] = inp_data2new(namedirfile,1,nveicoli);

sep = '_;_'; % GUI initializations

% Reading the names that will be used to set an appropriate GUI input
appo = findstr(petr,[fsl,'TrainDy_Files_']);
if isempty(appo)
    appo = findstr(petr,fsl);
    Projname = petr(appo(end)+1:end);
else
    % [Projname,CVs,DBVs,Mano,TestName] = read_names(namedirfile,fsl);
    Projname = petr(appo(end)+15:end);
end
appo = findstr(petr,[fsl 'Results',fsl]);
if isempty(appo)
    % This is necessary to handle tests not generated by the GUI. USER HAS
    % TO CHANGE FOLLOWING FOLDER EACH TIME THE FUNCTION RUNS ON A DIFFERENT
    % COMPUTER
    %maindir = 'A:\LAVORO\OFFICIAL TRAINDY\Official TrainDy validation tests GUI';
    %maindir = 'E:\Luciano\Dati_Applicazioni\1103\TrainDy Development\Validation Version 1.1.6';
    %maindir = 'D:\Luciano\1103\Official TrainDy validation tests';
    maindir = 'D:\Luciano\1103\Validation Version 1.1.6 - Def';
else
    maindir = petr(1:appo(1)-1);
end
appo = findstr(prTD,fsl);
i1 = findstr(prTD(appo(end):end),[fsl 'TrainDy_']);
i2 = findstr(prTD(appo(end):end),'_FILES');
TestName = prTD(appo(end)+8+i1:appo(end)+i2-2);
if isempty(TestName)
    TestName = prTD(appo(end)+1:end);
end
Mano = ''; CVs = ''; DBVs = '';
[npathGUI] = create_folder(fsl,maindir,Projname,TestName); % Create general path structure

% Configuration file
[CVs,DPBrake,Mano,pBCexp,train] = write_configuration_file(dLC,Dcoll,epsilon,fsl,kcoll,...
    namedirfile,npathGUI,nveicoli,nzug,ploco,sep,SR,t95p,Tamb,train);

write_test(fsl,npathGUI,ntrack,nzug,petr,TestName,P1,vel_0)
% write_loco(DBVs,fsl,kcoll,ploco,npathGUI,sep,train,typeDBV)
% write_wago(fsl,pwago,npathGUI,sep,train)
write_loco_wago(DBVs,fsl,kcoll,ploco,pwago,npathGUI,sep,train,typeDBV,'loco');
write_loco_wago(DBVs,fsl,kcoll,ploco,pwago,npathGUI,sep,train,typeDBV,'wago');
write_CV(CVs,fsl,namedirfile,npathGUI,sep,train)
write_DBV(DBVs,fsl,namedirfile,npathGUI,posDBV,sep,train,typeDBV)
write_BGDG(fsl,npathGUI,nveicoli,sep,train)
write_MANO(fsl,Mano,namedirfile,npathGUI,sep)
write_TRACK(fsl,ntrack,npathGUI,petr,sep)
end

function [npathGUI] = create_folder(fsl,maindir,Projname,TestName)

% Output files are stored in the directory C:\TrainDyGUI\Project\{name of the project}
if ~any(Projname==':')
    %npathGUI = ['C:' fsl 'TrainDyGUI' fsl 'Projects' fsl Projname fsl];
    %npathGUI = ['E:\Data\Luciano\Dati_Applicazioni\0903\Projects\' Projname fsl];
    npathGUI = [maindir fsl 'Projects' fsl Projname '_' TestName fsl];
else
    npathGUI = [Projname '_' TestName fsl];
end
if not(exist(npathGUI,'dir'))
    mkdir(npathGUI); 
    mkdir([npathGUI 'BlockFrictionLaws' fsl]);
    mkdir([npathGUI 'BrakeValve' fsl]);
    mkdir([npathGUI 'BuffersDrawGears' fsl]);
    mkdir([npathGUI 'Configuration' fsl]);
    mkdir([npathGUI 'ControlValve' fsl]);
    mkdir([npathGUI 'DiskFrictionLaws' fsl]);
    mkdir([npathGUI 'Locomotive' fsl]);
    mkdir([npathGUI 'Manoeuvre' fsl]);
    mkdir([npathGUI 'Test' fsl]);
    mkdir([npathGUI 'Track' fsl]);
    mkdir([npathGUI 'Wagon' fsl]);
end;

end

function [Projname,CVs,DBVs,Mano,TestName] = read_names(namedirfile,fsl)
% This function reads the names that will be used to create appropriate GUI filenames
nf = fopen([namedirfile fsl 'GUI_names.txt']);
cline = trova_info('% Project_name',nf);
Projname = fgetl(nf);
cline = trova_info('% Names_of_different_DBVs',nf);
findperc = []; ii = 0; DBVs = cell(1);
while isempty(findperc)
    ii = ii + 1;
    tline = fgetl(nf);
    if strcmp(tline(1),'%'), findperc = 1; else DBVs{ii} = tline; end
end
cline = trova_info('% Names_of_the_different_CVs',nf);
findperc = []; ii = 0; CVs = cell(1);
while isempty(findperc)
    ii = ii + 1;
    tline = fgetl(nf);
    if strcmp(tline(1),'%'), findperc = 1; else CVs{ii} = tline; end
end
cline = trova_info('% Name_of_manoeuvre_file',nf);
% Mano = fgetl(nf);
findperc = []; ii = 0; Mano = cell(1);
while isempty(findperc)
    ii = ii + 1;
    tline = fgetl(nf);
    if strcmp(tline(1),'%'), findperc = 1; else Mano{ii} = tline; end
end
cline = trova_info('% Test_name',nf);
TestName = fgetl(nf);
% ii = 0; TestName = cell(1);
% while 1
%     tline = fgetl(nf);
%     if ~ischar(tline)
%         break
%     else
%         ii = ii + 1;
%         TestName{ii} = tline;
%     end
% end
fclose(nf);
end

function [CVs,DPBrake,Mano,pBCexp,train] = write_configuration_file(dLC,Dcoll,epsilon,fsl,kcoll,...
    namedirfile,npathGUI,nveicoli,nzug,ploco,sep,SR,t95p,Tamb,train)
% Length of brake pipe for each vehicle
A = load([namedirfile fsl 'OverallDataBP.txt']);
Lvago = A(1,:); Dvago = A(2,:);
for ii = 1:length(ploco)
    train(ploco(ii)).mano = ['Mano_LOCO_' num2str(ii)]; %char(Mano{ii});
    Mano{ii} = train(ploco(ii)).mano;
end
train(1).cuml = train(1).lwag; train(1).mass = train(1).tare + train(1).load; 
pbb = zeros(1,nveicoli); pdb = pbb; pbb(1) = 100*train(1).pbb; pdb(1) = 100*train(1).pdb;
% FIXME: It assumes always zero for friction law. ERROR
frlaw = cell(1,nveicoli);
frlaw = man_frlaw(train,1,frlaw);
train(1).lBP = Lvago(1); train(1).D = Dvago(1);
for ii = 2:nveicoli
    train(ii).cuml = train(ii-1).cuml + train(ii).lwag;
    train(ii).mass = train(ii).tare + train(ii).load;
    train(ii).lBP = Lvago(ii); train(ii).D = Dvago(ii);
    pbb(ii) = 100*train(ii).pbb; pdb(ii) = 100*train(ii).pdb;
    frlaw = man_frlaw(train,ii,frlaw);
end
nfile = [npathGUI 'Configuration' fsl nzug(1:end-3) 'txt'];
nf = fopen(nfile,'w+');
% Configuration name
fprintf(nf,'confName=%s\r\n',nzug(1:end-4));
fprintf(nf,'confBrReg=$BRAKE_REGIME[2]\r\n'); % This is a dummy line, because for every vehicle is written the brake regime
fprintf(nf,'pos=');
fprintf(nf,'%g_;_',1:nveicoli-1);
fprintf(nf,'%g\r\n',nveicoli);
writerowstruct('%s',nf,'name','type=',nveicoli,sep,'struct',train);
% writerowstruct(data,nf,field,labelstring,nveicoli,sep,'struct',train)
writerowstruct('%s',nf,'mano','manoeuvre=',nveicoli,sep,'struct',train);
writerowstruct('%g',nf,'lwag','wagLength=',nveicoli,sep,'struct',train);
writerowstruct('%g',nf,'cuml','totLength=',nveicoli,sep,'struct',train);
writerowstruct('%g',nf,'','brPLength=',nveicoli,sep,'vector',Lvago);
writerowstruct('%bool',nf,'UnC','gpCStat=',nveicoli,sep,'struct',train);
writerowstruct('%g',nf,'load','load=',nveicoli,sep,'struct',train);
writerowstruct('%g',nf,'tare','tare=',nveicoli,sep,'struct',train);
% writerowstruct('%g',nf,'mass','mass=',nveicoli,sep,'struct',train);
mass = zeros(1,nveicoli); mass(1) = train(1).mass;
pbb = mass; pdb = mass;
pbb(1) = train(1).pbb; pdb(1) = train(1).pdb;
for ii = 2:nveicoli
   mass(ii) = train(ii).mass + mass(ii-1); 
   pbb(ii) = train(ii).pbb; pdb(ii) = train(ii).pdb;
end
fprintf(nf,'mass=');
fprintf(nf,'%g_;_',mass(1:end-1));
fprintf(nf,'%g\r\n',mass(end));

writerowstruct('%g',nf,'Fk','fk=',nveicoli,sep,'struct',train);
[CVs,DPBrake,pBC,pBCexp,regime,train] = readCV(fsl,namedirfile,train);
writerowstruct('%g',nf,'','bcExpTp=',nveicoli,sep,'vector',pBCexp);
writerowstruct('%g',nf,'','bcNomTp=',nveicoli,sep,'vector',pBC);
writerowstruct('%s',nf,'CV','cv=',nveicoli,sep,'struct',train);
writerowstruct('%bool',nf,'','cvStat=',nveicoli,sep,'vector',pBCexp);
writerowstringinfo(nf,'brReg=','$BRAKE_REGIME',nveicoli,sep,[1 2],regime);
writerowstruct('%g',nf,'','ft95=',nveicoli,sep,'vector',t95p);
writerowstruct('%g',nf,'','ft100=',nveicoli,sep,'vector',dLC(10,:));
% writerowstruct('%g',nf,'','contBl=',nveicoli,sep,'vector',pbb);
% writerowstruct('%g',nf,'','contDi=',nveicoli,sep,'vector',pdb);
strpbb = ['contBl=']; strpdb = ['contDi='];
for ii = 1:nveicoli-1
    if isempty(train(ii).bbtype)
        appo = '0';
    else
        appo = num2str(100*train(ii).pbb);
    end
    strpbb = [strpbb appo sep];
    if isempty(train(ii).dbtype)
        appo = '0';
    else
        appo = num2str(100*train(ii).pdb);
    end
    strpdb = [strpdb appo sep];
end
ii = nveicoli;
if isempty(train(ii).bbtype)
    appo = '0';
else
    appo = num2str(100*train(ii).pbb);
end
strpbb = [strpbb appo '\r\n'];
if isempty(train(ii).dbtype)
    appo = '0';
else
    appo = num2str(100*train(ii).pdb);
end
strpdb = [strpdb appo '\r\n'];
fprintf(nf,strpbb);
fprintf(nf,strpdb);
 

writerowstruct('%g',nf,'gap','gap=',nveicoli,sep,'struct',train);
writerowstruct('%s',nf,'nbgf','bufGearsF=',nveicoli,sep,'struct',train);
writerowstruct('%s',nf,'ndgf','drGearsF=',nveicoli,sep,'struct',train);
writerowstruct('%s',nf,'nbgr','bufGearsR=',nveicoli,sep,'struct',train);
writerowstruct('%s',nf,'ndgr','drGearsR=',nveicoli,sep,'struct',train);
writerowcellinfo(nf,'frictLaw=','$EXT_BLOCK_FRICTION_LAWS',nveicoli,sep,[0 1 2],frlaw);
A = load([namedirfile fsl 'GenericData.txt']);
Lcoll = A(6,:);
fprintf(nf,'inthcd=%g\r\n',Dcoll*1e3);
fprintf(nf,'lenhc=%g\r\n',Lcoll);
fprintf(nf,'cplfhc=%g\r\n',kcoll);
fprintf(nf,'srdw=%g\r\n',SR);
fprintf(nf,'envTemp=%g\r\n',Tamb);
fprintf(nf,'rouBP=%g\r\n',epsilon*1e3);
fclose(nf);

end

function [CVs,DPBrake,pBC,pBCexp,regime,train] = readCV(fsl,namedirfile,train)
% TODO Check if it is necessary to consider a different (bigger or lower) number of
% infotmation in order to decide if two devices are equal or not
% Experimental pressure for each vehicle
A = load([namedirfile fsl 'OverallDataCV.txt']);
B = load([namedirfile fsl 'LimitingCurve.txt']);
C = load([namedirfile fsl 'TransferFunction.txt']);
nptf = C(1,1)+C(2,1);
pBC = A(1,:); pBCexp = A(2,:); DPBrake = A(3,:); regime = A(4,:);
train(1).CV = ['CV_',train(1).name]; CVs{1} = train(1).CV;
c = 1; pos = 1; cc = 0;
for ii = 2:size(A,2)
    trovato = 1;
    for jj = 1:ii-1
        % % Following check does not consider releasing data
        % if norm(A([1,3,5:15],ii) - A([1,3,5:15],jj)) < 1e-9 && ...
        %         max(max(abs(B(1 + (ii-1)*6:ii*6-2,:) - B(1 + (jj-1)*6:jj*6-2,:)))) < 1e-9 ...
        %     && max(max(abs(C(3 + (ii-1)*nptf:2+ii*nptf-C(2,1),:) - C(3 + (jj-1)*nptf:2+jj*nptf-C(2,1),:)))) < 1e-9
        if norm(A([1,3,5:15],ii) - A([1,3,5:15],jj)) < 1e-9 && ...
                max(max(abs(B(1 + (ii-1)*6:ii*6,:) - B(1 + (jj-1)*6:jj*6,:)))) < 1e-9 ...
                && max(max(abs(C(3 + (ii-1)*nptf:2+ii*nptf-C(2,1),:) - C(3 + (jj-1)*nptf:2+jj*nptf-C(2,1),:)))) < 1e-9
           trovato = 0; 
           break
        end
    end
    if trovato == 1
        c = c + 1;
        cc = cc + 1;
        if cc == 1
            train(ii).CV = ['CV_',train(ii).name];
        else
            train(ii).CV = ['CV_',train(ii).name,'_',num2str(cc)];
        end
        CVs{c} = train(ii).CV;
    else
        cc = 0;
        train(ii).CV = train(jj).CV;
    end
end
end

function writerowstringinfo(nf,labelstring,stringinfo,nveicoli,sep,switchdata,vector)
fprintf(nf,'%s',labelstring);
for ii = 1:nveicoli-1
    info = comp_info(switchdata,vector,ii);
    fprintf(nf,'%s[%g]%s',stringinfo,info,sep);
end
info = comp_info(switchdata,vector,nveicoli);
fprintf(nf,'%s[%g]\r\n',stringinfo,info);

end

function info = comp_info(switchdata,vector,ii)

switch vector(ii)
    case 0
        info = switchdata(1);
    case 1
        info = switchdata(2);
    case 2
        info = switchdata(3);
    case 3
        info = switchdata(4);
end

end

function writerowcellinfo(nf,labelstring,stringinfo,nveicoli,sep,switchdata,cellinfo)

fprintf(nf,'%s',labelstring);
for ii = 1:nveicoli-1
    if ischar(cellinfo{ii})
        fprintf(nf,'%s%s',cellinfo{ii},sep);
    elseif cellinfo{ii} == -1
        fprintf(nf,'CONST_FRICT_COEFF%s',sep);
    else
        info = comp_info_cell(switchdata,cellinfo,ii);
        fprintf(nf,'%s[%g]%s',stringinfo,info,sep);
    end
end
ii = nveicoli;
if ischar(cellinfo{ii})
    fprintf(nf,'%s\r\n',cellinfo{ii});
elseif cellinfo{ii} == -1
    fprintf(nf,'CONST_FRICT_COEFF\r\n');
else
    info = comp_info_cell(switchdata,cellinfo,nveicoli);
    fprintf(nf,'%s[%g]\r\n',stringinfo,info);
end


end

function info = comp_info_cell(switchdata,vector,ii)

switch cell2mat(vector(ii))
    case 0
        info = switchdata(1);
    case 1
        info = switchdata(2);
    case 2
        info = switchdata(3);
    case 3
        info = switchdata(4);
end

end

function write_test(fsl,npathGUI,ntrack,nzug,petr,TestName,P1,vel_0)
% ntest = petr(findstr(petr,'TrainDy_Files_') + numel('TrainDy_Files_'):end);
ntest = TestName;
if isempty(ntest)
    ntest = TestName;
end
nfile = [npathGUI 'Test' fsl ntest '.txt'];
nf = fopen(nfile,'w+');
fprintf(nf,'name=%s\r\n',TestName);
fprintf(nf,'configuration=%s\r\n',nzug(1:end-4));
fprintf(nf,'track=%s\r\n',ntrack(1:end-4));
fprintf(nf,'stspd=%g\r\n',vel_0(1));
fprintf(nf,'initpres=%g\r\n',P1(1)*1e-5-1);
fclose(nf);
end

% function write_loco(DBVs,fsl,kcoll,ploco,npathGUI,sep,train,typeDBV)
function write_loco_wago(DBVs,fsl,kcoll,ploco,pwago,npathGUI,sep,train,typeDBV,vtype)

if strcmp(vtype,'loco')
    % Find different locomotives in the train
    ploco2 = ploco;
    for ii = 2:numel(ploco)
        jj = 0;
        while jj < ii - 1
            jj = jj + 1;
            if strcmp(train(ploco(ii)).name,train(ploco(jj)).name)
                ploco2(ii) = 0;
                break
            end
        end
    end
    ploco = ploco(ploco2 ~= 0);
    pveh = ploco; vt = 1;
elseif strcmp(vtype,'wago')
    % Find different wagons in the train
    pwago2 = pwago;
    for ii = 2:numel(pwago)
        jj = 0;
        while jj < ii - 1
            jj = jj + 1;
            if strcmp(train(pwago(ii)).name,train(pwago(jj)).name)
                pwago2(ii) = 0;
                break
            end
        end
    end
    pwago = pwago(pwago2 ~= 0);
    pveh = pwago; vt = 0;
end

for ii = 1:numel(pveh)
    v = pveh(ii);
    if vt
        nfile = [npathGUI 'Locomotive' fsl train(v).name '.txt'];
    else
        nfile = [npathGUI 'Wagon' fsl train(v).name '.txt'];
    end
    nf = fopen(nfile,'w+');
    fprintf(nf,'name=%s\r\n',train(v).name);
    if vt
        fprintf(nf,'mass=%g\r\n',train(v).mass);
    else
        fprintf(nf,'tare=%g\r\n',train(v).tare);
    end
    fprintf(nf,'length=%g\r\n',train(v).lwag);
    fprintf(nf,'rotaryMasses=%g\r\n',train(v).prot*100);
    if vt
        fprintf(nf,'numAxes=%g\r\n',train(v).na);
        %if not(isempty(train(v).K)), K = train(v).K; else K = kcoll; end
        if not(isempty(train(v).K)), K = train(v).K; else K = 0; end
        fprintf(nf,'cplfhc=%g\r\n',K);
    else
        if isempty(train(v).na)
            fprintf(nf,'axesNum=4\r\n');
        else
            fprintf(nf,'axesNum=%g\r\n',train(v).na);
        end
    end
    % N_00. During the translation, configuration data will be used instead of vehicle
    % data. Difference may occur if customization has been performed.
    fprintf(nf,'buffingGearsF=%s\r\n',train(v).nbgf);
    fprintf(nf,'drawGearsF=%s\r\n',train(v).ndgf);
    fprintf(nf,'buffingGearsR=%s\r\n',train(v).nbgr);
    fprintf(nf,'drawGearsR=%s\r\n',train(v).ndgr);
    % N_01. Note that the ratio among the length of brake pipe and vehicle length is not a
    % direct input of TrainDy. This means this ratio is computed using information
    % stored in configuration file. If User change this information the corresponding
    % parameter in the vehicle will change.
    fprintf(nf,'brakePipeWagonLen=%g\r\n',train(v).lBP/train(v).lwag);
    fprintf(nf,'brakePipeDiam=%g\r\n',train(v).D);
    fprintf(nf,'controlValve=%s\r\n',train(v).CV);
    if vt
        %fprintf(nf,'driverBrakeValve=%s\r\n',char(DBVs(typeDBV(ii))));
        appo = ['DBV_' num2str(typeDBV(ii))];
        fprintf(nf,'driverBrakeValve=%s\r\n',appo);
    end
    
    if not(isempty(train(v).bbtype))
        fprintf(nf,'chkBlockBrake=true\r\n');
        fprintf(nf,'bbContribution=%g\r\n',train(v).pbb*100);
        if vt
            fprintf(nf,'bbBringShoesNum=%g\r\n',train(v).nbs);
        else
            fprintf(nf,'bbShoesNum=%g\r\n',train(v).nbs);
        end
        fprintf(nf,'bbShoesType=$SHOES_TYPE[');
        switch train(v).typeSh
            case 'Bg'
                fprintf(nf,'1]\r\n');
            case 'Bgu'
                fprintf(nf,'2]\r\n');
        end
        switch train(v).bbtype
            case 'BLOCK_BW_EL'
                fprintf(nf,'bbRadioSystem1=false\r\nbbRigRatio=0\r\nbbRigEff=0.83\r\nbbCylSection=0\r\nbbInvMass=0\r\nbbEmptyPress=0\r\n');
                fprintf(nf,'bbRadioSystem2=true\r\n');
                fprintf(nf,'bbBrWeightLoad=%g\r\n',train(v).bbbwl);
                fprintf(nf,'bbChgWeight=%g\r\n',train(v).bbbwi);
                fprintf(nf,'bbBrWeightEmpty=%g\r\n',train(v).bbbwe);
                fprintf(nf,'bbRadioSystem3=false\r\nbbTotMass=0.0_;_0.0\r\nbbMassBraked=0.0_;_0.0\r\n');
            case 'BLOCK_SI'
                fprintf(nf,'bbRadioSystem1=true\r\n');
                fprintf(nf,'bbRigEff=%g\r\n',train(v).rendtim);
                fprintf(nf,'bbRadioSystem2=false\r\nbbRadioSystem3=false\r\n');
            case 'BLOCK_BW_AC'
                fprintf(nf,'bbRadioSystem1=false\r\nbbRadioSystem2=false\r\n');
                fprintf(nf,'bbRadioSystem3=true\r\n');
                bbauto = train(v).bbauto;
                writerowstruct('%g',nf,'','bbTotMass=',size(bbauto,1),sep,'vett',bbauto(:,1));
                writerowstruct('%g',nf,'','bbMassBraked=',size(bbauto,1),sep,'vett',bbauto(:,2));
            case 'BLOCK_BW'
                fprintf(nf,'bbRadioSystem1=false\r\nbbRigRatio=0\r\nbbRigEff=0.83\r\nbbCylSection=0\r\n');
                fprintf(nf,'bbRadioSystem2=true\r\n');
                fprintf(nf,'bbBrWeight=%g\r\n',train(v).bbbw);
                fprintf(nf,'bbRadioSystem3=false\r\n');
        end
        fprintf(nf,'bbFF=%g\r\n',train(v).Ff);
        fprintf(nf,'bbFR=%g\r\n',train(v).Fr);
        write_frico(nf,train,v)
    else
        fprintf(nf,'chkBlockBrake=false\r\nbbContribution=100\r\n'); 
        fprintf(nf,'bbRadioSystem1=false\r\nbbRadioSystem2=false\r\nbbRadioSystem3=false\r\n');
    end
    
    
    if not(isempty(train(v).dbtype))
        fprintf(nf,'chkDiskBrake=true\r\n'); 
        fprintf(nf,'dbContribution=%g\r\n',train(v).pdb*100);
        switch train(v).dbtype
            case 'DISK_BW_EL'
                fprintf(nf,'dbRadioSystem1=false\r\n');
                fprintf(nf,'dbRadioSystem2=true\r\n');
                fprintf(nf,'dbBrWeightLoad=%g\r\n',train(v).dbbwl);
                fprintf(nf,'dbChgWeight=%g\r\n',train(v).dbbwi);
                fprintf(nf,'dbBrWeightEmpty=%g\r\n',train(v).dbbwe);
                fprintf(nf,'dbRadioSystem3=false\r\n');
            case 'DISK_BW_AC'
                fprintf(nf,'dbRadioSystem1=false\r\ndbRadioSystem2=false\r\n');
                fprintf(nf,'dbRadioSystem3=true\r\n');
                writerowstruct('%g',nf,'','dbTotMass=',size(train(v).dbauto,1),sep,'vector',train(v).dbauto(:,1));
                writerowstruct('%g',nf,'','dbMassBraked=',size(train(v).dbauto,1),sep,'vector',train(v).dbauto(:,2));
            case 'DISK_SI'
                fprintf(nf,'dbRadioSystem1=true\r\n');
                fprintf(nf,'dbRadioSystem2=false\r\ndbRadioSystem3=false\r\n');
            case 'DISK_BW'
                fprintf(nf,'dbRadioSystem1=false\r\ndbCylSection=0\r\ndbFRigRatio=0\r\ndbSRigRatio=0\r\ndbFEffic=0\r\ndbSEffic=0\r\ndbCountForce=0\r\ndbDBRadius=0\r\ndbWRadius=0\r\ndbRadioSystem2=true\r\n');
                fprintf(nf,'dbBrWeight=%g\r\n',train(v).dbbw);
        end
        fprintf(nf,'dbRadioFC=true\r\n');
        if isnumeric(train(v).dfl)
            fprintf(nf,'dbFrictCoeff=%g\r\n',train(v).dfl);
            fprintf(nf,'dbRadioFL=false\r\n');
        elseif not(isempty(train(v).frlaw))
            fprintf(nf,'dbRadioFL=true\r\n');
            fprintf(nf,'dbFrictLaw=%s\r\n',train(v).frlaw);
        end
    else
        fprintf(nf,'chkDiskBrake=false\r\ndbContribution=100\r\n'); 
        fprintf(nf,'dbRadioSystem1=false\r\ndbRadioSystem2=false\r\ndbRadioSystem3=false\r\n');
        %fprintf(nf,'dbRadioSystem1=false\r\ndbCylSection=0\r\ndbInvMass=0\r\ndbEmptyPress=0\r\ndbFRigRatio=0\r\ndbSRigRatio=0\r\ndbFEffic=0\r\ndbSEffic=0\r\ndbCountForce=0\r\ndbDBRadius=0\r\ndbWRadius=0\r\ndbRadioSystem2=false\r\ndbBrWeightLoad=0\r\ndbChgWeight=0\r\ndbBrWeightEmpty=0\r\ndbRadioSystem3=false\r\ndbTotMass=0.0_;_0.0\r\ndbMassBraked=0.0_;_0.0\r\n');
        fprintf(nf,'dbRadioFC=false\r\n');
        fprintf(nf,'dbRadioFL=false\r\n');
    end
    
    if not(isempty(train(v).npebv)) || not(isempty(train(v).npetv))
        fprintf(nf,'chkElettrodBrake=true\r\n');
        if not(isempty(train(v).npebv))
            elbcv = train(v).elbcv; 
            writerowstruct('%g',nf,'','ebSpeed=',size(elbcv,1),sep,'vector',elbcv(:,1));
            writerowstruct('%g',nf,'','ebBrForce=',size(elbcv,1),sep,'vector',elbcv(:,2));
            elbct = train(v).elbct; 
            writerowstruct('%g',nf,'','ebTime=',size(elbct,1),sep,'vector',elbct(:,1));
            writerowstruct('%g',nf,'','ebPercMaxF=',size(elbct,1),sep,'vector',elbct(:,2));
        else
            fprintf(nf,'ebSpeed=0.0_;_0.0_;_0.0\r\nebBrForce=0.0_;_0.0_;_0.0\r\nebTime=0.0_;_0.0\r\nebPercMaxF=0.0_;_0.0\r\n');
        end
        if not(isempty(train(v).npetv))
            eltcv = train(v).eltcv;
            writerowstruct('%g',nf,'','etSpeed=',size(eltcv,1),sep,'vector',eltcv(:,1));
            writerowstruct('%g',nf,'','etBrForce=',size(eltcv,1),sep,'vector',eltcv(:,2));
            eltct = train(v).eltct; 
            writerowstruct('%g',nf,'','etTime=',size(eltct,1),sep,'vector',eltct(:,1));
            writerowstruct('%g',nf,'','etPercMaxF=',size(eltct,1),sep,'vector',eltct(:,2));
        else
            fprintf(nf,'etSpeed=0.0_;_0.0_;_0.0\r\netBrForce=0.0_;_0.0_;_0.0\r\netTime=0.0_;_0.0\r\netPercMaxF=0.0_;_0.0\r\n');
        end
    elseif vt
        fprintf(nf,'chkElettrodBrake=false\r\n');
    end
    
    fclose(nf);
end

end

function write_wago(fsl,pwago,npathGUI,sep,train)

% Find different wagons in the train
pwago2 = pwago;
for ii = 2:numel(pwago)
    jj = 0;
    while jj < ii - 1
       jj = jj + 1;
       if strcmp(train(pwago(ii)).name,train(pwago(jj)).name)
           pwago2(ii) = 0;
           break
       end
    end
end
pwago = pwago(pwago2 ~= 0);
for ii = 1:numel(pwago)
    v = pwago(ii);
    nfile = [npathGUI 'Wagon' fsl train(v).name '.txt'];
    nf = fopen(nfile,'w+');
    fprintf(nf,'name=%s\r\n',train(v).name);
    fprintf(nf,'tare=%g\r\n',train(v).tare);
    fprintf(nf,'length=%g\r\n',train(v).lwag);
    fprintf(nf,'rotaryMasses=%g\r\n',train(v).prot*100);
    if isempty(train(v).na)
        fprintf(nf,'axesNum=4\r\n');
    else
        fprintf(nf,'axesNum=%g\r\n',train(v).na);
    end
    fprintf(nf,'buffingGearsF=%s\r\n',train(v).nbgf);
    fprintf(nf,'drawGearsF=%s\r\n',train(v).ndgf);
    fprintf(nf,'buffingGearsR=%s\r\n',train(v).nbgr);
    fprintf(nf,'drawGearsR=%s\r\n',train(v).ndgr);
    fprintf(nf,'brakePipeWagonLen=%g\r\n',train(v).lBP/train(v).lwag);
    fprintf(nf,'brakePipeDiam=%g\r\n',train(v).D);
    fprintf(nf,'controlValve=%s\r\n',train(v).CV);
    p = train(v).pbb;
    if not(isempty(train(v).bbtype))
        fprintf(nf,'chkBlockBrake=true\r\n');
        fprintf(nf,'bbContribution=%g\r\n',p*100);
        fprintf(nf,'bbShoesNum=%g\r\n',train(v).nbs);
        fprintf(nf,'bbShoesType=$SHOES_TYPE[');
        switch train(v).typeSh
            case 'Bg'
                fprintf(nf,'1]\r\n');
            case 'Bgu'
                fprintf(nf,'2]\r\n');
        end
        switch train(v).bbtype
            case 'BLOCK_BW_EL'
                fprintf(nf,'bbRadioSystem1=false\r\nbbRigEff=0.83\r\nbbRigRatio=0\r\nbbCylSection=0\r\nbbInvMass=0\r\nbbEmptyPress=0\r\n');
                fprintf(nf,'bbRadioSystem2=true\r\n');
                fprintf(nf,'bbBrWeightLoad=%g\r\n',train(v).bbbwl);
                fprintf(nf,'bbChgWeight=%g\r\n',train(v).bbbwi);
                fprintf(nf,'bbBrWeightEmpty=%g\r\n',train(v).bbbwe);
                fprintf(nf,'bbRadioSystem3=false\r\nbbTotMass=0.0_;_0.0\r\nbbMassBraked=0.0_;_0.0\r\n');
            case 'BLOCK_SI'
                fprintf(nf,'bbRigEff=%g\r\n',train(v).rendtim);
            case 'BLOCK_BW_AC'
        end
        fprintf(nf,'bbFF=%g\r\n',train(v).Ff);
        fprintf(nf,'bbFR=%g\r\n',train(v).Fr);
        write_frico(nf,train,v)
    else
        fprintf(nf,'chkBlockBrake=false\r\n'); 
    end
    p = train(v).pdb;
    if not(isempty(train(v).dbtype))
        fprintf(nf,'chkDiskBrake=true\r\n'); 
        fprintf(nf,'dbContribution=%g\r\n',p*100);
        switch train(v).dbtype
            case 'DISK_BW_EL'
                fprintf(nf,'dbRadioSystem2=true\r\n');
                fprintf(nf,'dbBrWeightLoad=%g\r\n',train(v).dbbwl);
                fprintf(nf,'dbChgWeight=%g\r\n',train(v).dbbwi);
                fprintf(nf,'dbBrWeightEmpty=%g\r\n',train(v).dbbwe);
            case 'DISK_BW_AC'
                fprintf(nf,'dbRadioSystem3=true\r\n');
                writerowstruct('%g',nf,'','dbTotMass=',size(train(v).dbauto,1),sep,'vector',train(v).dbauto(:,1));
                writerowstruct('%g',nf,'','dbMassBraked=',size(train(v).dbauto,1),sep,'vector',train(v).dbauto(:,2));
            case 'DISK_SI'
        end
        fprintf(nf,'dbRadioFC=true\r\n');
        if isnumeric(train(v).dfl)
            fprintf(nf,'dbFrictCoeff=%g\r\n',train(v).dfl);
            fprintf(nf,'dbRadioFL=false\r\n');
        elseif not(isempty(train(v).frlaw))
            fprintf(nf,'dbRadioFL=true\r\n');
            fprintf(nf,'dbFrictLaw=%s\r\n',train(v).frlaw);
        end
        
    else
        fprintf(nf,'chkDiskBrake=false\r\n'); 
        fprintf(nf,'dbRadioSystem1=false\r\ndbCylSection=0\r\ndbInvMass=0\r\ndbEmptyPress=0\r\ndbFRigRatio=0\r\ndbSRigRatio=0\r\ndbFEffic=0\r\ndbSEffic=0\r\ndbCountForce=0\r\ndbDBRadius=0\r\ndbWRadius=0\r\ndbRadioSystem2=false\r\ndbBrWeightLoad=0\r\ndbChgWeight=0\r\ndbBrWeightEmpty=0\r\ndbRadioSystem3=false\r\ndbTotMass=0.0_;_0.0\r\ndbMassBraked=0.0_;_0.0\r\n');
        fprintf(nf,'dbRadioFC=false\r\n');
        fprintf(nf,'dbRadioFL=false\r\n');
    end
    fclose(nf);
end
end

function write_CV(CVs,fsl,namedirfile,npathGUI,sep,train)

% pCV is the vector that stores the position in the train of different CVs
pCV = ones(1,length(CVs));
for ii = 2:length(CVs)
    for jj = 1:length(train)
        if strcmp(train(jj).CV,char(CVs(ii)))
        pCV(ii) = jj;
        break
        end
    end
end
% Reading information from LimitingCurve.txt
A = load([namedirfile fsl 'LimitingCurve.txt']);
B =  load([namedirfile fsl 'TransferFunction.txt']);
nB = B(1,1); nR = B(2,1);
C =  load([namedirfile fsl 'OverallDataCV.txt']);
for ii = 1:numel(pCV)
    v = pCV(ii);
    nfile = [npathGUI 'ControlValve' fsl char(CVs(ii)) '.txt'];
    nf = fopen(nfile,'w+');
    fprintf(nf,'name=%s\r\n',char(CVs(ii)));
    dummy = A(6*(v-1)+1:6*v,:);
    fprintf(nf,'asPresBrCyl=%g\r\n',dummy(1,1));
    fprintf(nf,'asTime=%g\r\n',dummy(1,2));
    fprintf(nf,'genPipe=%g\r\n',dummy(1,3));
    fprintf(nf,'ifPresBrCyl=%g\r\n',dummy(2,1));
    fprintf(nf,'ifTime=%g\r\n',dummy(2,2));
    fprintf(nf,'btp95Pm=%g\r\n',dummy(3,1));
    fprintf(nf,'btpPm=%g\r\n',dummy(3,2));
    fprintf(nf,'btg95Pm=%g\r\n',dummy(4,1));
    fprintf(nf,'btgPm=%g\r\n',dummy(4,2));
    fprintf(nf,'rtp110Pm=%g\r\n',dummy(5,1));
    fprintf(nf,'rtpPm=%g\r\n',dummy(5,2));
    fprintf(nf,'rtg110Pm=%g\r\n',dummy(6,1));
    fprintf(nf,'rtgPm=%g\r\n',dummy(6,2));
    appo = B(2 + (nB+nR)*(v-1) + 1 : 2 + (nB+nR)*v,:);
    writerowstruct('%g',nf,'','brPresGP=',nB,sep,'vector',appo(1:nB,1));
    writerowstruct('%g',nf,'','brPresBC=',nB,sep,'vector',appo(1:nB,2));
    writerowstruct('%g',nf,'','rePresGP=',nR,sep,'vector',appo(nB+1:end,1));
    writerowstruct('%g',nf,'','rePresBC=',nR,sep,'vector',appo(nB+1:end,2));
    fprintf(nf,'dpBPPABrCyl=%g\r\n',C(3,v));
    fprintf(nf,'strBrCyl=%g\r\n',C(7,v));
    fprintf(nf,'volAcCha=%g\r\n',C(8,v));
    fprintf(nf,'diaAcCha=%g\r\n',C(9,v));
    fprintf(nf,'dpBPPAAcCha=%g\r\n',C(10,v));
    fprintf(nf,'minPrClAcCha=%g\r\n',C(11,v));
    fprintf(nf,'volAuxRes=%g\r\n',C(12,v));
    fprintf(nf,'diaAuxRes=%g\r\n',C(13,v));
    fprintf(nf,'dpChVal=%g\r\n',C(14,v));
    fprintf(nf,'prRunAuxRes=%g\r\n',C(15,v));
    fclose(nf);
end
end

function write_DBV(DBVs,fsl,namedirfile,npathGUI,posDBV,sep,train,typeDBV)
A = load([namedirfile fsl 'DBVData.txt']);
for ii = 1:numel(typeDBV)
    v = typeDBV(ii);
    name = ['DBV_',num2str(typeDBV(ii))]; %char(DBVs(typeDBV(ii)));
    nfile = [npathGUI 'BrakeValve' fsl name '.txt'];
    nf = fopen(nfile,'w+');
    fprintf(nf,'name=%s\r\n',name);
    dummy = A(1 + (v-1)*10+1:v*10 + 1);
    fprintf(nf,'ebdiameo=%g\r\n',dummy(2));
    fprintf(nf,'sbdiameo=%g\r\n',dummy(4));
    fprintf(nf,'rediameo=%g\r\n',dummy(8));
    if dummy(3) == -1
        fprintf(nf,'ebflcoef=0\r\nchkebpl=true\r\n');
    else
        fprintf(nf,'ebflcoef=%g\r\nchkebpl=false\r\n',dummy(3));
    end
    if dummy(5) == -1
        fprintf(nf,'sbflcoef=0\r\nchksbpl=true\r\n');
    else
        fprintf(nf,'sbflcoef=%g\r\nchksbpl=false\r\n',dummy(5));
    end
    fprintf(nf,'sbtad15=%g\r\n',dummy(6));
    fprintf(nf,'sbtd=%g\r\n',dummy(7));
    if dummy(9) == -1
        fprintf(nf,'reflcoef=0\r\nchkrepl=true\r\n');
    else
        fprintf(nf,'reflcoef=%g\r\nchkrepl=false\r\n',dummy(9));
    end
    fprintf(nf,'retai15=%g\r\n',dummy(10));
    fclose(nf);
    
end
end

function write_BGDG(fsl,npathGUI,nveicoli,sep,train)
% For each vehicle, cellBGDG contains: name, type, position, vehicle
cellBGDG = cell(nveicoli*4,4);
for ii = 1:nveicoli
   v0 = 4*(ii-1);
   cellBGDG(v0+1,:) = [{train(ii).nbgf} {'bg'} {'f'} {ii}];
   cellBGDG(v0+2,:) = [{train(ii).nbgr} {'bg'} {'r'} {ii}];
   cellBGDG(v0+3,:) = [{train(ii).ndgf} {'dg'} {'f'} {ii}];
   cellBGDG(v0+4,:) = [{train(ii).ndgr} {'dg'} {'r'} {ii}];
end
% Then some rows of cellBGDG are removed
pos = ones(4*nveicoli,1);
for ii = 2:4*nveicoli
    jj = 0; trovato = 0;
    while trovato == 0 && jj < ii - 1
        jj = jj + 1;
        if strcmp(cellBGDG(ii,1),cellBGDG(jj,1))
            pos(ii) = 0; trovato = 1;
        break
        end
    end
    if trovato == 0
        pos(ii) = ii;
    end
end
pos = pos(pos ~= 0);
cellBGDG = cellBGDG(pos,:);
for ii = 1:size(cellBGDG,1)
    a = cell2mat(cellBGDG(ii,4));
    name = char(cellBGDG(ii,1));
    nfile = [npathGUI 'BuffersDrawGears' fsl name '.txt'];
    nf = fopen(nfile,'w+');
    fprintf(nf,'name=%s\r\n',name);
    
    if strcmp(cellBGDG(ii,2),'bg')
        if strcmp(cellBGDG(ii,3),'f')
            vload = train(a).bgvplf;
            vunload = train(a).bgvpuf;
            x = train(a).bgsf;
            f = train(a).bgff;
            d = train(a).bgdf;
        elseif strcmp(cellBGDG(ii,3),'r')
            vload = train(a).bgvplr;
            vunload = train(a).bgvpur;
            x = train(a).bgsr;
            f = train(a).bgfr;
            d = train(a).bgdr;
        end
    elseif strcmp(cellBGDG(ii,2),'dg')
        if strcmp(cellBGDG(ii,3),'f')
            vload = train(a).dgvplf;
            vunload = train(a).dgvpuf;
            x = train(a).dgsf;
            f = train(a).dgff;
            d = train(a).dgdf;
        elseif strcmp(cellBGDG(ii,3),'r')
            vload = train(a).dgvplr;
            vunload = train(a).dgvpur;
            x = train(a).dgsr;
            f = train(a).dgfr;
            d = train(a).dgdr;
        end
    end
    fprintf(nf,'loadLimVel=%g\r\n',vload);
    fprintf(nf,'unloadLimVel=%g\r\n',vunload);
    if d == 0
        fprintf(nf,'chkDampCoeff=false\r\ndampCoeff=0\r\n');
        writerowstruct('%g',nf,'','stroke=',length(x),sep,'vett',x)
        writerowstruct('%g',nf,'','load=',length(x),sep,'vett',f(:,2))
        writerowstruct('%g',nf,'','unload=',length(x),sep,'vett',f(:,1))
    else
        fprintf(nf,'chkDampCoeff=true\r\ndampCoeff=%g\r\n',d*100);
        writerowstruct('%g',nf,'','stroke=',length(x),sep,'vett',x)
        writerowstruct('%g',nf,'','load=',length(x),sep,'vett',f(:,1))
        %writerowstruct('%g',nf,'','unload=',length(x),sep,'vett',f(:,1)*(1-d))
    end        

    fclose(nf);
end

end

function write_MANO(fsl,Mano,namedirfile,npathGUI,sep)
nfile = [namedirfile fsl 'ManoeuvreLoco.txt'];
nf = fopen(nfile,'r');
numline = gotonumeric(nf);
M = zeros(1,10);
for ii = 1:sum(numline)
   tline = str2num(fgetl(nf));
   if length(tline) == 7
       M(ii,:) = [tline(1:5) -1 -1 tline(6:7) 0];
       %numline = [numline(1:5) -1 -1 numline(6:7) 0];
   elseif length(tline) == 10
       M(ii,:) = tline;
   else
       error('Length not supported. Check manoeuvre file');
   end
   
end
fclose(nf);
for ii = 1:length(Mano)
    nfile = [npathGUI 'Manoeuvre' fsl Mano{ii} '.txt'];
    nf = fopen(nfile,'w+');
    if ii > 1
        i1 = sum(numline(1:ii-1)) + 1;
    else
        i1 = 1;
    end
    i2 = sum(numline(1:ii));
    t = zeros(i2-i1+1,1); ctrl = t; m = t; c = 0; 
    trac = t; elettrodyn = t; elettropn = t; pn = t;
    for jj = i1:i2
        c = c+1;
        a = find(M(jj,3:5) ~= -1);
        t(c) = a; ctrl(c) = M(jj,a+2); m(c) = M(jj,1);
        %if M(jj,1) == 0, t(c) = 0; end
        trac(c) = floor(M(jj,1)/1000);
        elettrodyn(c) = floor((M(jj,1)-trac(c)*1000)/100);
        elettropn(c) = floor((M(jj,1)-trac(c)*1000-elettrodyn(c)*100)/10);
        pn(c) = (M(jj,1)-trac(c)*1000-elettrodyn(c)*100-elettropn(c)*10);
    end
    %M(M == -1) = 0; % In order to avoid -1s in GUI
    writerowstringinfo(nf,'mtype=','$MAN_TYPE',c,sep,0:3,t);
    writerowstruct('%g',nf,'','ctrl=',c,sep,'vett',ctrl);
    writerowstruct('%bool',nf,'','pnBr=',c,sep,'vett',pn);
    writerowstruct('%bool',nf,'','edBr=',c,sep,'vett',elettrodyn);
    writerowstruct('%bool',nf,'','epBr=',c,sep,'vett',elettropn);
    writerowstruct('%bool',nf,'','tract=',c,sep,'vett',trac);
    MM = M(i1:i2,[2 8 9]);
    MM(MM == -1) = 0; % In order to avoid -1s in GUI
    %writerowstruct('%g',nf,'','pres=',c,sep,'vett',M(i1:i2,2));
    %writerowstruct('%g',nf,'','delay=',c,sep,'vett',M(i1:i2,8));
    %writerowstruct('%g',nf,'','applic=',c,sep,'vett',M(i1:i2,9));
    writerowstruct('%g',nf,'','pres=',c,sep,'vett',MM(:,1));
    writerowstruct('%g',nf,'','delay=',c,sep,'vett',MM(:,2));
    writerowstruct('%g',nf,'','applic=',c,sep,'vett',MM(:,3));

    fclose(nf);
end

end

function write_TRACK(fsl,ntrack,npathGUI,petr,sep)

trackGUI = load([petr,fsl,'Track',fsl,ntrack]);
sizTrack = size(trackGUI,1);
nfile = [npathGUI 'Track' fsl ntrack(1:end-4) '.txt'];
nf = fopen(nfile,'w+');

writerowstringinfo(nf,'secType=','$SEC_TYPE',sizTrack,sep,trackGUI(:,1),trackGUI(:,1)-1);
writerowstruct('%g',nf,'','length=',sizTrack,sep,'vector',trackGUI(:,2));
writerowstruct('%g',nf,'','curvRad=',sizTrack,sep,'vector',trackGUI(:,3));
writerowstruct('%g',nf,'','slope=',sizTrack,sep,'vector',trackGUI(:,4));
writerowstruct('%g',nf,'','elev=',sizTrack,sep,'vector',trackGUI(:,5));
writerowstruct('%g',nf,'','parabLen=',sizTrack,sep,'vector',trackGUI(:,6));

fclose(nf);
end

function frlaw = man_frlaw(train,ii,frlaw)

if isempty(train(ii).bbtype)
    frlaw{ii} = -1;
else
    switch train(ii).bfl
        case 2
            frlaw{ii} = 0;
        case 4
            frlaw{ii} = 2;
        case 5
            frlaw{ii} = 1;
        case 99
            frlaw{ii} = train(ii).frlaw;
    end
end

end

function write_frico(nf,train,v)
if not(isempty(train(v).bbtype))
    if isempty(train(v).frlaw)
        fprintf(nf,'bbFrictLaw=$EXT_BLOCK_FRICTION_LAWS[');
        switch train(v).bfl
            case 2
                fprintf(nf,'0]\r\n');
            case 4
                % Karwatzki
                fprintf(nf,'2]\r\n');
            case 5
                % BZA
                fprintf(nf,'1]\r\n');
        end
    else
        fprintf(nf,'bbFrictLaw=%s',train(v).frlaw);
    end
end

end

function [fsl,ntrack,nzug,petr,prTD,shw,vel_0] = inp_TDET

nf = fopen('TDET.inf','r');
cline = fgetl(nf);
if strcmp(cline,'WINDOWS'), fsl = '\'; elseif strcmp(cline,'LINUX'), fsl = '/'; end
% Main folder that contains the subfolder of the requested input
petr = fgetl(nf);
% % Folder that contains the results of etrain
% pres = fgetl(nf);
% % eTrain results file name
% nres = fgetl(nf);
% Folder that will contain TrainDy results
prTD = [petr fsl fgetl(nf)]; 
% cline = str2num(fgetl(nf));
% % Starting column braking forces informations
% sibr = cline(1); 
% % Number of columns to jump to skip from a wagon to the next one
% sifl = cline(2); 
% jumpbrake = cline(3); 
shw = 1; %cline(4);
% Configuration file name
nzug = fgetl(nf);
% Name of the track file
ntrack = fgetl(nf);
% eTrain pro file name
vel_0 = str2double(fgetl(nf));
cline = fgetl(nf);
if ischar(cline) && not(isempty(str2num(cline)))
    vel_0(2) = str2num(cline);
else
    vel_0(2) = 1;
end
fclose(nf);


end